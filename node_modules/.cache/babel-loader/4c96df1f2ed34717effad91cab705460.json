{"ast":null,"code":"import { createReducer } from 'typesafe-actions';\nimport { getReposActions, searchReposActions } from './github-repos.actions';\nconst initialState = {\n  isLoading: false,\n  originalData: null,\n  filteredData: null,\n  error: null\n};\nexport const githubReposReducer = createReducer(initialState).handleAction(getReposActions.request, state => ({ ...state,\n  isLoading: true\n})).handleAction(getReposActions.success, (state, action) => ({ ...state,\n  isLoading: false,\n  originalData: action.payload.map(item => {\n    return {\n      title: item.name,\n      lang: item.language,\n      desc: item.description\n    };\n  }),\n  filteredData: action.payload.map(item => {\n    return {\n      title: item.name,\n      lang: item.language,\n      desc: item.description\n    };\n  })\n})).handleAction(getReposActions.failure, (state, action) => ({ ...state,\n  isLoading: false,\n  error: action.payload,\n  originalData: null,\n  filteredData: null\n})).handleAction(searchReposActions.request, state => ({ ...state,\n  isLoading: true\n})).handleAction(searchReposActions.success, (state, action) => ({ ...state,\n  isLoading: false,\n  filteredData: state.originalData.filter(item => {\n    const a = item.title.includes(action.payload) || item.lang.includes(action.payload) || item.desc.includes(action.payload);\n    console.log(a);\n    return item;\n  })\n})).handleAction(searchReposActions.failure, (state, action) => ({ ...state,\n  isLoading: false,\n  error: action.payload,\n  filteredData: null\n}));","map":{"version":3,"sources":["/Users/a1/Desktop/requestum-test-app/src/store/github-repos/githubb-repos.reducer.ts"],"names":["createReducer","getReposActions","searchReposActions","initialState","isLoading","originalData","filteredData","error","githubReposReducer","handleAction","request","state","success","action","payload","map","item","title","name","lang","language","desc","description","failure","filter","a","includes","console","log"],"mappings":"AAAA,SAAoBA,aAApB,QAAwC,kBAAxC;AACA,SAAQC,eAAR,EAAyBC,kBAAzB,QAAkD,wBAAlD;AASA,MAAMC,YAA+B,GAAG;AACpCC,EAAAA,SAAS,EAAE,KADyB;AAEpCC,EAAAA,YAAY,EAAE,IAFsB;AAGpCC,EAAAA,YAAY,EAAE,IAHsB;AAIpCC,EAAAA,KAAK,EAAE;AAJ6B,CAAxC;AASA,OAAO,MAAMC,kBAAkB,GAAGR,aAAa,CAAwCG,YAAxC,CAAb,CAC7BM,YAD6B,CAE1BR,eAAe,CAACS,OAFU,EAGzBC,KAAD,KAA+B,EAC3B,GAAGA,KADwB;AAE3BP,EAAAA,SAAS,EAAE;AAFgB,CAA/B,CAH0B,EAQ7BK,YAR6B,CAS1BR,eAAe,CAACW,OATU,EAU1B,CAACD,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCP,EAAAA,SAAS,EAAE,KAFwB;AAGnCC,EAAAA,YAAY,EAAEQ,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAoBC,IAAD,IAAe;AAC5C,WAAO;AACHC,MAAAA,KAAK,EAAED,IAAI,CAACE,IADT;AAEHC,MAAAA,IAAI,EAAEH,IAAI,CAACI,QAFR;AAGHC,MAAAA,IAAI,EAAEL,IAAI,CAACM;AAHR,KAAP;AAKH,GANa,CAHqB;AAUnChB,EAAAA,YAAY,EAAEO,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAoBC,IAAD,IAAe;AAC5C,WAAO;AACHC,MAAAA,KAAK,EAAED,IAAI,CAACE,IADT;AAEHC,MAAAA,IAAI,EAAEH,IAAI,CAACI,QAFR;AAGHC,MAAAA,IAAI,EAAEL,IAAI,CAACM;AAHR,KAAP;AAKH,GANa;AAVqB,CAAvC,CAV0B,EA6B7Bb,YA7B6B,CA8B1BR,eAAe,CAACsB,OA9BU,EA+B1B,CAACZ,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCP,EAAAA,SAAS,EAAE,KAFwB;AAGnCG,EAAAA,KAAK,EAAEM,MAAM,CAACC,OAHqB;AAInCT,EAAAA,YAAY,EAAE,IAJqB;AAKnCC,EAAAA,YAAY,EAAE;AALqB,CAAvC,CA/B0B,EAuC7BG,YAvC6B,CAwC1BP,kBAAkB,CAACQ,OAxCO,EAyCzBC,KAAD,KAA+B,EAC3B,GAAGA,KADwB;AAE3BP,EAAAA,SAAS,EAAE;AAFgB,CAA/B,CAzC0B,EA8C7BK,YA9C6B,CA+C1BP,kBAAkB,CAACU,OA/CO,EAgD1B,CAACD,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCP,EAAAA,SAAS,EAAE,KAFwB;AAGnCE,EAAAA,YAAY,EAAEK,KAAK,CAACN,YAAN,CAAmBmB,MAAnB,CAA2BR,IAAD,IAAe;AACnD,UAAMS,CAAC,GACHT,IAAI,CAACC,KAAL,CAAWS,QAAX,CAAoBb,MAAM,CAACC,OAA3B,KACAE,IAAI,CAACG,IAAL,CAAUO,QAAV,CAAmBb,MAAM,CAACC,OAA1B,CADA,IAEAE,IAAI,CAACK,IAAL,CAAUK,QAAV,CAAmBb,MAAM,CAACC,OAA1B,CAHJ;AAKAa,IAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACA,WAAOT,IAAP;AACH,GARa;AAHqB,CAAvC,CAhD0B,EA8D7BP,YA9D6B,CA+D1BP,kBAAkB,CAACqB,OA/DO,EAgE1B,CAACZ,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCP,EAAAA,SAAS,EAAE,KAFwB;AAGnCG,EAAAA,KAAK,EAAEM,MAAM,CAACC,OAHqB;AAInCR,EAAAA,YAAY,EAAE;AAJqB,CAAvC,CAhE0B,CAA3B","sourcesContent":["import {ActionType, createReducer} from 'typesafe-actions';\nimport {getReposActions, searchReposActions} from './github-repos.actions';\n\nexport interface IGithubReposState {\n    isLoading: boolean;\n    originalData: any;\n    filteredData: any;\n    error: string | null;\n}\n\nconst initialState: IGithubReposState = {\n    isLoading: false,\n    originalData: null,\n    filteredData: null,\n    error: null,\n};\n\ntype GithubReposActions = ActionType<typeof getReposActions | typeof searchReposActions>;\n\nexport const githubReposReducer = createReducer<IGithubReposState, GithubReposActions>(initialState)\n    .handleAction(\n        getReposActions.request,\n        (state): IGithubReposState => ({\n            ...state,\n            isLoading: true\n        })\n    )\n    .handleAction(\n        getReposActions.success,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            originalData: action.payload.map((item: any) => {\n                return {\n                    title: item.name,\n                    lang: item.language,\n                    desc: item.description\n                }\n            }),\n            filteredData: action.payload.map((item: any) => {\n                return {\n                    title: item.name,\n                    lang: item.language,\n                    desc: item.description\n                }\n            })\n        })\n    )\n    .handleAction(\n        getReposActions.failure,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            error: action.payload,\n            originalData: null,\n            filteredData: null,\n        })\n    )\n    .handleAction(\n        searchReposActions.request,\n        (state): IGithubReposState => ({\n            ...state,\n            isLoading: true\n        })\n    )\n    .handleAction(\n        searchReposActions.success,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            filteredData: state.originalData.filter((item: any) => {\n                const a = (\n                    item.title.includes(action.payload) ||\n                    item.lang.includes(action.payload) ||\n                    item.desc.includes(action.payload)\n                )\n                console.log(a)\n                return item;\n            })\n        })\n    )\n    .handleAction(\n        searchReposActions.failure,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            error: action.payload,\n            filteredData: null,\n        })\n    )\n"]},"metadata":{},"sourceType":"module"}