{"ast":null,"code":"import { createReducer } from 'typesafe-actions';\nimport { getReposActions, searchReposActions, getSearchReposHistoryActions } from './github-repos.actions';\nconst initialState = {\n  isLoading: false,\n  originalData: null,\n  filteredData: null,\n  searchHistory: null,\n  error: null\n};\nexport const githubReposReducer = createReducer(initialState).handleAction(getReposActions.request, state => ({ ...state,\n  isLoading: true\n})).handleAction(getReposActions.success, (state, action) => ({ ...state,\n  isLoading: false,\n  originalData: action.payload.map(item => {\n    return {\n      title: item.name,\n      lang: item.language,\n      desc: item.description\n    };\n  }),\n  filteredData: action.payload.map(item => {\n    return {\n      title: item.name,\n      lang: item.language,\n      desc: item.description\n    };\n  })\n})).handleAction(getReposActions.failure, (state, action) => ({ ...state,\n  isLoading: false,\n  error: action.payload,\n  originalData: null,\n  filteredData: null,\n  searchHistory: null\n})).handleAction(searchReposActions.request, state => ({ ...state,\n  isLoading: true\n})).handleAction(searchReposActions.success, (state, action) => ({ ...state,\n  isLoading: false,\n  filteredData: state.originalData.filter(item => {\n    if (item.title.toLowerCase().includes(action.payload.toLowerCase()) || item.lang.toLowerCase().includes(action.payload.toLowerCase())) return item;\n  })\n})).handleAction(searchReposActions.failure, (state, action) => ({ ...state,\n  isLoading: false,\n  error: action.payload,\n  filteredData: null\n})).handleAction(getSearchReposHistoryActions.request, state => ({ ...state,\n  isLoading: true\n})).handleAction(getSearchReposHistoryActions.success, (state, action) => ({ ...state,\n  isLoading: false,\n  searchHistory: action.payload.slice()\n})).handleAction(getSearchReposHistoryActions.failure, (state, action) => ({ ...state,\n  isLoading: false,\n  error: action.payload,\n  searchHistory: null\n}));","map":{"version":3,"sources":["/Users/a1/Desktop/requestum-test-app/src/store/github-repos/githubb-repos.reducer.ts"],"names":["createReducer","getReposActions","searchReposActions","getSearchReposHistoryActions","initialState","isLoading","originalData","filteredData","searchHistory","error","githubReposReducer","handleAction","request","state","success","action","payload","map","item","title","name","lang","language","desc","description","failure","filter","toLowerCase","includes","slice"],"mappings":"AAAA,SAAoBA,aAApB,QAAwC,kBAAxC;AACA,SAAQC,eAAR,EAAyBC,kBAAzB,EAA6CC,4BAA7C,QAAgF,wBAAhF;AAUA,MAAMC,YAA+B,GAAG;AACpCC,EAAAA,SAAS,EAAE,KADyB;AAEpCC,EAAAA,YAAY,EAAE,IAFsB;AAGpCC,EAAAA,YAAY,EAAE,IAHsB;AAIpCC,EAAAA,aAAa,EAAE,IAJqB;AAKpCC,EAAAA,KAAK,EAAE;AAL6B,CAAxC;AAUA,OAAO,MAAMC,kBAAkB,GAAGV,aAAa,CAAwCI,YAAxC,CAAb,CAC7BO,YAD6B,CAE1BV,eAAe,CAACW,OAFU,EAGzBC,KAAD,KAA+B,EAC3B,GAAGA,KADwB;AAE3BR,EAAAA,SAAS,EAAE;AAFgB,CAA/B,CAH0B,EAQ7BM,YAR6B,CAS1BV,eAAe,CAACa,OATU,EAU1B,CAACD,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCR,EAAAA,SAAS,EAAE,KAFwB;AAGnCC,EAAAA,YAAY,EAAES,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAoBC,IAAD,IAAe;AAC5C,WAAO;AACHC,MAAAA,KAAK,EAAED,IAAI,CAACE,IADT;AAEHC,MAAAA,IAAI,EAAEH,IAAI,CAACI,QAFR;AAGHC,MAAAA,IAAI,EAAEL,IAAI,CAACM;AAHR,KAAP;AAKH,GANa,CAHqB;AAUnCjB,EAAAA,YAAY,EAAEQ,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAoBC,IAAD,IAAe;AAC5C,WAAO;AACHC,MAAAA,KAAK,EAAED,IAAI,CAACE,IADT;AAEHC,MAAAA,IAAI,EAAEH,IAAI,CAACI,QAFR;AAGHC,MAAAA,IAAI,EAAEL,IAAI,CAACM;AAHR,KAAP;AAKH,GANa;AAVqB,CAAvC,CAV0B,EA6B7Bb,YA7B6B,CA8B1BV,eAAe,CAACwB,OA9BU,EA+B1B,CAACZ,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCR,EAAAA,SAAS,EAAE,KAFwB;AAGnCI,EAAAA,KAAK,EAAEM,MAAM,CAACC,OAHqB;AAInCV,EAAAA,YAAY,EAAE,IAJqB;AAKnCC,EAAAA,YAAY,EAAE,IALqB;AAMnCC,EAAAA,aAAa,EAAE;AANoB,CAAvC,CA/B0B,EAwC7BG,YAxC6B,CAyC1BT,kBAAkB,CAACU,OAzCO,EA0CzBC,KAAD,KAA+B,EAC3B,GAAGA,KADwB;AAE3BR,EAAAA,SAAS,EAAE;AAFgB,CAA/B,CA1C0B,EA+C7BM,YA/C6B,CAgD1BT,kBAAkB,CAACY,OAhDO,EAiD1B,CAACD,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCR,EAAAA,SAAS,EAAE,KAFwB;AAGnCE,EAAAA,YAAY,EAAEM,KAAK,CAACP,YAAN,CAAmBoB,MAAnB,CAA2BR,IAAD,IAAe;AACnD,QACIA,IAAI,CAACC,KAAL,CAAWQ,WAAX,GAAyBC,QAAzB,CAAkCb,MAAM,CAACC,OAAP,CAAeW,WAAf,EAAlC,KACAT,IAAI,CAACG,IAAL,CAAUM,WAAV,GAAwBC,QAAxB,CAAiCb,MAAM,CAACC,OAAP,CAAeW,WAAf,EAAjC,CAFJ,EAGE,OAAOT,IAAP;AACL,GALa;AAHqB,CAAvC,CAjD0B,EA4D7BP,YA5D6B,CA6D1BT,kBAAkB,CAACuB,OA7DO,EA8D1B,CAACZ,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCR,EAAAA,SAAS,EAAE,KAFwB;AAGnCI,EAAAA,KAAK,EAAEM,MAAM,CAACC,OAHqB;AAInCT,EAAAA,YAAY,EAAE;AAJqB,CAAvC,CA9D0B,EAqE7BI,YArE6B,CAsE1BR,4BAA4B,CAACS,OAtEH,EAuEzBC,KAAD,KAA+B,EAC3B,GAAGA,KADwB;AAE3BR,EAAAA,SAAS,EAAE;AAFgB,CAA/B,CAvE0B,EA4E7BM,YA5E6B,CA6E1BR,4BAA4B,CAACW,OA7EH,EA8E1B,CAACD,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCR,EAAAA,SAAS,EAAE,KAFwB;AAGnCG,EAAAA,aAAa,EAAEO,MAAM,CAACC,OAAP,CAAea,KAAf;AAHoB,CAAvC,CA9E0B,EAoF7BlB,YApF6B,CAqF1BR,4BAA4B,CAACsB,OArFH,EAsF1B,CAACZ,KAAD,EAAQE,MAAR,MAAuC,EACnC,GAAGF,KADgC;AAEnCR,EAAAA,SAAS,EAAE,KAFwB;AAGnCI,EAAAA,KAAK,EAAEM,MAAM,CAACC,OAHqB;AAInCR,EAAAA,aAAa,EAAE;AAJoB,CAAvC,CAtF0B,CAA3B","sourcesContent":["import {ActionType, createReducer} from 'typesafe-actions';\nimport {getReposActions, searchReposActions, getSearchReposHistoryActions} from './github-repos.actions';\n\nexport interface IGithubReposState {\n    isLoading: boolean;\n    originalData: any;\n    filteredData: any;\n    searchHistory: any;\n    error: string | null;\n}\n\nconst initialState: IGithubReposState = {\n    isLoading: false,\n    originalData: null,\n    filteredData: null,\n    searchHistory: null,\n    error: null,\n};\n\ntype GithubReposActions = ActionType<typeof getReposActions | typeof searchReposActions | typeof getSearchReposHistoryActions>;\n\nexport const githubReposReducer = createReducer<IGithubReposState, GithubReposActions>(initialState)\n    .handleAction(\n        getReposActions.request,\n        (state): IGithubReposState => ({\n            ...state,\n            isLoading: true\n        })\n    )\n    .handleAction(\n        getReposActions.success,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            originalData: action.payload.map((item: any) => {\n                return {\n                    title: item.name,\n                    lang: item.language,\n                    desc: item.description\n                }\n            }),\n            filteredData: action.payload.map((item: any) => {\n                return {\n                    title: item.name,\n                    lang: item.language,\n                    desc: item.description\n                }\n            })\n        })\n    )\n    .handleAction(\n        getReposActions.failure,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            error: action.payload,\n            originalData: null,\n            filteredData: null,\n            searchHistory: null,\n        })\n    )\n    .handleAction(\n        searchReposActions.request,\n        (state): IGithubReposState => ({\n            ...state,\n            isLoading: true\n        })\n    )\n    .handleAction(\n        searchReposActions.success,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            filteredData: state.originalData.filter((item: any) => {\n                if (\n                    item.title.toLowerCase().includes(action.payload.toLowerCase()) ||\n                    item.lang.toLowerCase().includes(action.payload.toLowerCase())\n                ) return item;\n            })\n        })\n    )\n    .handleAction(\n        searchReposActions.failure,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            error: action.payload,\n            filteredData: null,\n        })\n    )\n    .handleAction(\n        getSearchReposHistoryActions.request,\n        (state): IGithubReposState => ({\n            ...state,\n            isLoading: true\n        })\n    )\n    .handleAction(\n        getSearchReposHistoryActions.success,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            searchHistory: action.payload.slice()\n        })\n    )\n    .handleAction(\n        getSearchReposHistoryActions.failure,\n        (state, action): IGithubReposState => ({\n            ...state,\n            isLoading: false,\n            error: action.payload,\n            searchHistory: null,\n        })\n    )\n"]},"metadata":{},"sourceType":"module"}