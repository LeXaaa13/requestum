{"ast":null,"code":"import axios from 'axios';\nimport { environment } from \"../environments/environment\";\nexport const restAxios = axios.create({\n  baseURL: environment\n});\nexport class RestService {\n  static async get({\n    url,\n    config,\n    params\n  }) {\n    const headers = config && config.headers ? config.headers : {};\n    const res = await restAxios.get(`${environment}/${url}`, { ...config,\n      params,\n      ...headers\n    });\n    return res.data;\n  }\n\n  static async delete({\n    url,\n    config,\n    params\n  }) {\n    const headers = config && config.headers ? config.headers : {};\n    const res = await restAxios.delete(`${environment}/${url}`, { ...config,\n      params,\n      ...headers\n    });\n    return res.data;\n  }\n\n  static async post({\n    url,\n    config,\n    data,\n    params\n  }) {\n    const headers = config && config.headers ? config.headers : {};\n    const res = await restAxios.post(`${environment}/${url}`, data, { ...config,\n      params,\n      ...headers\n    });\n    return res.data;\n  }\n\n  static async put({\n    url,\n    config,\n    data,\n    params\n  }) {\n    const headers = config && config.headers ? config.headers : {};\n    const res = await restAxios.put(`${environment}/${url}`, data, { ...config,\n      params,\n      ...headers\n    });\n    return res.data;\n  }\n\n  static async patch({\n    url,\n    config,\n    data,\n    params\n  }) {\n    const headers = config && config.headers ? config.headers : {};\n    const res = await restAxios.patch(`${environment}/${url}`, data, { ...config,\n      params,\n      ...headers\n    });\n    return res.data;\n  }\n\n}","map":{"version":3,"sources":["/Users/a1/Desktop/requestum-test-app/src/helpers/rest-service.ts"],"names":["axios","environment","restAxios","create","baseURL","RestService","get","url","config","params","headers","res","data","delete","post","put","patch"],"mappings":"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","sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\nimport {environment} from \"../environments/environment\";\n\nexport const restAxios = axios.create({\n    baseURL: environment,\n});\n\nexport interface RequestParametersI {\n    url: string;\n    config?: AxiosRequestConfig;\n    data?: any;\n    params?: {};\n}\n\nexport class RestService {\n    public static async get<T = any>({ url, config, params }: RequestParametersI): Promise<T> {\n        const headers = config && config.headers ? config.headers : {};\n        const res = await restAxios.get<T>(`${environment}/${url}`, {\n            ...config,\n            params,\n            ...headers,\n        });\n        return res.data;\n    }\n\n    public static async delete({ url, config, params }: RequestParametersI): Promise<void> {\n        const headers = config && config.headers ? config.headers : {};\n        const res = await restAxios.delete(`${environment}/${url}`, {\n            ...config,\n            params,\n            ...headers,\n        });\n        return res.data;\n    }\n\n    public static async post<T = any>({ url, config, data, params }: RequestParametersI): Promise<T> {\n        const headers = config && config.headers ? config.headers : {};\n        const res = await restAxios.post(`${environment}/${url}`, data, {\n            ...config,\n            params,\n            ...headers,\n        });\n        return res.data;\n    }\n\n    public static async put<T = any>({ url, config, data, params }: RequestParametersI): Promise<T> {\n        const headers = config && config.headers ? config.headers : {};\n        const res = await restAxios.put(`${environment}/${url}`, data, {\n            ...config,\n            params,\n            ...headers,\n        });\n        return res.data;\n    }\n\n    public static async patch<T = any>({ url, config, data, params }: RequestParametersI): Promise<T> {\n        const headers = config && config.headers ? config.headers : {};\n        const res = await restAxios.patch(`${environment}/${url}`, data, {\n            ...config,\n            params,\n            ...headers,\n        });\n        return res.data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}